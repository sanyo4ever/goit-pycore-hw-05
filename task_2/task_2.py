"""
Завдання 2
---------
Опис: Створення генератора для знаходження дійсних чисел у тексті 
      та обчислення загального прибутку.

Тема: Функціональне програмування та вбудовані модулі Python
Концепції: Генератори (Generators), Функції як аргументи, Регулярні вирази
"""

import re
from typing import Callable


def generator_numbers(text: str):
    """
    Генератор для ітерації по всіх дійсних числах у тексті.
    
    Функція використовує регулярні вирази для ідентифікації дійсних чисел,
    які чітко відокремлені пробілами з обох боків. Підтримує як цілі, так
    і дробові числа.
    
    Args:
        text (str): Вхідний текст для аналізу
        
    Yields:
        float: Наступне дійсне число знайдене у тексті
        
    Example:
        >>> text = "Дохід: 1000.01 та 27.45 доларів"
        >>> list(generator_numbers(text))
        [1000.01, 27.45]
    """
    # Регулярний вираз для знаходження дійсних чисел
    # \b - границя слова, \d+ - одна або більше цифр, 
    # (?:\.\d+)? - необов'язкова десяткова частина
    # Але оскільки в завданні всі числа мають десяткову частину,
    # використовуємо більш специфічний патерн
    pattern = r'\b\d+\.\d+\b'
    
    # Знаходимо всі співпадіння в тексті
    matches = re.findall(pattern, text)
    
    # Повертаємо кожне число як float через yield
    for match in matches:
        yield float(match)


def sum_profit(text: str, func: Callable) -> float:
    """
    Обчислює загальну суму чисел у тексті використовуючи генератор.
    
    Функція приймає текст і функцію-генератор, яка витягує числа з тексту,
    а потім підсумовує всі знайдені числа.
    
    Args:
        text (str): Вхідний текст для аналізу
        func (Callable): Функція-генератор для витягування чисел з тексту
        
    Returns:
        float: Загальна сума всіх чисел знайдених у тексті
        
    Example:
        >>> text = "Дохід: 1000.01 та 27.45 доларів"
        >>> sum_profit(text, generator_numbers)
        1027.46
    """
    # Використовуємо генератор для отримання всіх чисел і підсумовуємо їх
    return sum(func(text))


def main():
    """
    Головна функція для демонстрації роботи рішення.
    """
    # Приклад з завдання
    text = ("Загальний дохід працівника складається з декількох частин: "
            "1000.01 як основний дохід, доповнений додатковими надходженнями "
            "27.45 і 324.00 доларів.")
    
    total_income = sum_profit(text, generator_numbers)
    print(f"Загальний дохід: {total_income}")
    
    # Додаткові приклади
    print("\n" + "="*60)
    print("Додаткові приклади:")
    print("="*60)
    
    # Приклад 2: Різні джерела доходу
    text2 = "Зарплата: 5000.50 грн, премія: 1200.75 грн, бонус: 300.25 грн."
    total_income2 = sum_profit(text2, generator_numbers)
    print(f"\nПриклад 2:\n{text2}")
    print(f"Загальний дохід: {total_income2}")
    
    # Приклад 3: Демонстрація генератора окремо
    text3 = "Інвестиції дали прибуток: 15000.00, 2500.50 та 750.99 доларів."
    print(f"\nПриклад 3:\n{text3}")
    print("Знайдені числа:")
    for number in generator_numbers(text3):
        print(f"  - {number}")
    print(f"Загальний дохід: {sum_profit(text3, generator_numbers)}")
    
    # Приклад 4: Текст без чисел
    text4 = "Цей текст не містить жодних дійсних чисел."
    total_income4 = sum_profit(text4, generator_numbers)
    print(f"\nПриклад 4:\n{text4}")
    print(f"Загальний дохід: {total_income4}")


if __name__ == "__main__":
    main()

