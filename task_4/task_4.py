"""
–ó–∞–≤–¥–∞–Ω–Ω—è 4
---------
–û–ø–∏—Å: –ö–æ–Ω—Å–æ–ª—å–Ω–∏–π –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤.

–¢–µ–º–∞: –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–±—É–¥–æ–≤–∞–Ω—ñ –º–æ–¥—É–ª—ñ Python
–ö–æ–Ω—Ü–µ–ø—Ü—ñ—ó: –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏, –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫, –ö–æ–º–∞–Ω–¥–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
"""

from typing import Callable, Dict, List


def input_error(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    
    –û–±—Ä–æ–±–ª—è—î –≤–∏–Ω—è—Ç–∫–∏ KeyError, ValueError, IndexError —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î
    –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏.
    
    Args:
        func: –§—É–Ω–∫—Ü—ñ—è-–æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏
        
    Returns:
        –û–±–≥–æ—Ä–Ω—É—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
    """
    def inner(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except KeyError:
            return "‚ùå Contact not found."
        except ValueError:
            return "‚ùå Give me name and phone please."
        except IndexError:
            return "‚ùå Enter the argument for the command"
        except Exception as e:
            return f"‚ùå Error: {str(e)}"
    
    return inner


def parse_input(user_input: str) -> tuple:
    """
    –ü–∞—Ä—Å–∏—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Ç–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏.
    
    Args:
        user_input: –†—è–¥–æ–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        
    Returns:
        tuple: (–∫–æ–º–∞–Ω–¥–∞, —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤)
    """
    parts = user_input.strip().split()
    command = parts[0].lower() if parts else ""
    args = parts[1:] if len(parts) > 1 else []
    return command, args


@input_error
def add_contact(args: List[str], contacts: Dict[str, str]) -> str:
    """
    –î–æ–¥–∞—î –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤.
    
    Args:
        args: –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ [—ñ–º'—è, —Ç–µ–ª–µ—Ñ–æ–Ω]
        contacts: –°–ª–æ–≤–Ω–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
        
    Returns:
        –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        
    Raises:
        ValueError: –Ø–∫—â–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
    """
    if len(args) < 2:
        raise ValueError("Not enough arguments")
    
    name, phone = args[0], args[1]
    contacts[name] = phone
    return f"‚úÖ Contact added: {name} - {phone}"


@input_error
def change_contact(args: List[str], contacts: Dict[str, str]) -> str:
    """
    –ó–º—ñ–Ω—é—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É.
    
    Args:
        args: –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ [—ñ–º'—è, –Ω–æ–≤–∏–π_—Ç–µ–ª–µ—Ñ–æ–Ω]
        contacts: –°–ª–æ–≤–Ω–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
        
    Returns:
        –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –∑–º—ñ–Ω—É
        
    Raises:
        ValueError: –Ø–∫—â–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
        KeyError: –Ø–∫—â–æ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    """
    if len(args) < 2:
        raise ValueError("Not enough arguments")
    
    name, phone = args[0], args[1]
    
    if name not in contacts:
        raise KeyError(f"Contact '{name}' not found")
    
    old_phone = contacts[name]
    contacts[name] = phone
    return f"‚úÖ Contact updated: {name} - {old_phone} ‚Üí {phone}"


@input_error
def show_phone(args: List[str], contacts: Dict[str, str]) -> str:
    """
    –ü–æ–∫–∞–∑—É—î –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ–Ω—Ç–∞–∫—Ç—É.
    
    Args:
        args: –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ [—ñ–º'—è]
        contacts: –°–ª–æ–≤–Ω–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
        
    Returns:
        –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∫–æ–Ω—Ç–∞–∫—Ç—É
        
    Raises:
        IndexError: –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —ñ–º'—è
        KeyError: –Ø–∫—â–æ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    """
    if len(args) == 0:
        raise IndexError("Name is required")
    
    name = args[0]
    
    if name not in contacts:
        raise KeyError(f"Contact '{name}' not found")
    
    return f"üìû {name}: {contacts[name]}"


@input_error
def show_all(args: List[str], contacts: Dict[str, str]) -> str:
    """
    –ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏.
    
    Args:
        args: –°–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ (–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è)
        contacts: –°–ª–æ–≤–Ω–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
        
    Returns:
        –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—É—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫
    """
    if not contacts:
        return "üìã No contacts saved yet."
    
    result = "üìã All contacts:\n"
    result += "-" * 30 + "\n"
    for name, phone in contacts.items():
        result += f"  {name}: {phone}\n"
    return result.strip()


def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –±–æ—Ç–∞ - –∑–∞–ø—É—Å–∫–∞—î —Ü–∏–∫–ª –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥.
    """
    contacts = {}
    
    print("=" * 50)
    print("ü§ñ Welcome to the assistant bot!")
    print("=" * 50)
    print("\nAvailable commands:")
    print("  ‚Ä¢ hello          - Greet the bot")
    print("  ‚Ä¢ add [name] [phone]   - Add a new contact")
    print("  ‚Ä¢ change [name] [phone] - Change contact's phone")
    print("  ‚Ä¢ phone [name]   - Show contact's phone")
    print("  ‚Ä¢ all            - Show all contacts")
    print("  ‚Ä¢ close or exit  - Exit the bot")
    print("-" * 50)
    
    while True:
        user_input = input("\nüí¨ Enter a command: ").strip()
        
        if not user_input:
            continue
        
        command, args = parse_input(user_input)
        
        if command in ["close", "exit"]:
            print("üëã Good bye!")
            break
        
        elif command == "hello":
            print("üëã How can I help you?")
        
        elif command == "add":
            result = add_contact(args, contacts)
            print(result)
        
        elif command == "change":
            result = change_contact(args, contacts)
            print(result)
        
        elif command == "phone":
            result = show_phone(args, contacts)
            print(result)
        
        elif command == "all":
            result = show_all(args, contacts)
            print(result)
        
        else:
            print("‚ùå Invalid command. Type 'hello', 'add', 'change', 'phone', 'all', 'close' or 'exit'.")


if __name__ == "__main__":
    main()

