"""
Завдання 1
---------
Опис: Реалізація функції caching_fibonacci, яка створює та використовує кеш 
      для зберігання і повторного використання вже обчислених значень чисел Фібоначчі.

Тема: Функціональне програмування та вбудовані модулі Python
Концепції: Замикання (Closures), Рекурсія, Кешування
"""


def caching_fibonacci():
    """
    Створює функцію для обчислення чисел Фібоначчі з кешуванням.
    
    Використовує замикання для збереження кешу між викликами.
    Кеш зберігає вже обчислені значення, що значно прискорює 
    повторні обчислення.
    
    Returns:
        function: Внутрішня функція fibonacci(n), яка обчислює n-те число Фібоначчі
    """
    # Словник для кешування обчислених значень
    cache = {}
    
    def fibonacci(n):
        """
        Обчислює n-те число Фібоначчі з використанням рекурсії та кешування.
        
        Ряд Фібоначчі: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...
        Формула: F(n) = F(n-1) + F(n-2)
        
        Args:
            n (int): Порядковий номер числа в послідовності Фібоначчі
            
        Returns:
            int: n-те число Фібоначчі
        """
        # Базові випадки
        if n <= 0:
            return 0
        if n == 1:
            return 1
        
        # Перевірка, чи значення вже є в кеші
        if n in cache:
            return cache[n]
        
        # Рекурсивне обчислення з кешуванням результату
        cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
        
        return cache[n]
    
    # Повертаємо внутрішню функцію (замикання)
    return fibonacci


def main():
    """
    Головна функція для демонстрації роботи рішення.
    """
    # Отримуємо функцію fibonacci з кешуванням
    fib = caching_fibonacci()
    
    # Використовуємо функцію fibonacci для обчислення чисел Фібоначчі
    print("Обчислення чисел Фібоначчі:")
    print(f"fib(10) = {fib(10)}")  # Виведе 55
    print(f"fib(15) = {fib(15)}")  # Виведе 610
    
    # Додаткові приклади для демонстрації
    print("\nДодаткові приклади:")
    print(f"fib(0) = {fib(0)}")    # Виведе 0
    print(f"fib(1) = {fib(1)}")    # Виведе 1
    print(f"fib(5) = {fib(5)}")    # Виведе 5
    print(f"fib(20) = {fib(20)}")  # Виведе 6765
    
    # Демонстрація переваг кешування
    print("\n" + "="*50)
    print("Повторний виклик fib(15) використовує кеш:")
    print(f"fib(15) = {fib(15)}")  # Швидко повертає значення з кешу
    
    # Створення нової функції з новим кешем
    print("\n" + "="*50)
    print("Створення нової функції з окремим кешем:")
    fib2 = caching_fibonacci()
    print(f"fib2(10) = {fib2(10)}")  # Виведе 55 (з новим кешем)


if __name__ == "__main__":
    main()

