"""
–ó–∞–≤–¥–∞–Ω–Ω—è 3 (–Ω–µ –æ–±–æ–≤'—è–∑–∫–æ–≤–µ)
---------------------------
–û–ø–∏—Å: –ê–Ω–∞–ª—ñ–∑ —Ñ–∞–π–ª—ñ–≤ –ª–æ–≥—ñ–≤ –∑ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Ä—ñ–≤–Ω—è–º–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è
      —Ç–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ä—ñ–≤–Ω–µ–º.

–¢–µ–º–∞: –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–±—É–¥–æ–≤–∞–Ω—ñ –º–æ–¥—É–ª—ñ Python
–ö–æ–Ω—Ü–µ–ø—Ü—ñ—ó: –†–æ–±–æ—Ç–∞ –∑ —Ñ–∞–π–ª–∞–º–∏, –ê—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞, –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫,
          –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è (filter, lambda)
"""

import sys
from typing import Dict, List
from pathlib import Path


def parse_log_line(line: str) -> Dict[str, str]:
    """
    –ü–∞—Ä—Å–∏—Ç—å —Ä—è–¥–æ–∫ –ª–æ–≥—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫ –∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.
    
    –§–æ—Ä–º–∞—Ç —Ä—è–¥–∫–∞: "YYYY-MM-DD HH:MM:SS LEVEL Message text"
    
    Args:
        line (str): –†—è–¥–æ–∫ –∑ –ª–æ–≥—É
        
    Returns:
        dict: –°–ª–æ–≤–Ω–∏–∫ –∑ –∫–ª—é—á–∞–º–∏ 'date', 'time', 'level', 'message'
        
    Example:
        >>> parse_log_line("2024-01-22 08:30:01 INFO User logged in")
        {'date': '2024-01-22', 'time': '08:30:01', 'level': 'INFO', 
         'message': 'User logged in'}
    """
    try:
        # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ä—è–¥–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        parts = line.strip().split(' ', 3)
        
        if len(parts) < 4:
            # –Ø–∫—â–æ —Ä—è–¥–æ–∫ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
            return {}
        
        return {
            'date': parts[0],
            'time': parts[1],
            'level': parts[2],
            'message': parts[3]
        }
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É —Ä—è–¥–∫–∞: {e}")
        return {}


def load_logs(file_path: str) -> List[Dict[str, str]]:
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ª–æ–≥–∏ –∑ —Ñ–∞–π–ª—É —Ç–∞ –ø–∞—Ä—Å–∏—Ç—å –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫.
    
    Args:
        file_path (str): –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –ª–æ–≥—ñ–≤
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–∏–º–∏ –ª–æ–≥–∞–º–∏
        
    Raises:
        FileNotFoundError: –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        IOError: –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É
    """
    logs = []
    
    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Path –¥–ª—è –∫—Ä–∞—â–æ—ó —Ä–æ–±–æ—Ç–∏ –∑—ñ —à–ª—è—Ö–∞–º–∏
        log_file = Path(file_path)
        
        if not log_file.exists():
            raise FileNotFoundError(f"–§–∞–π–ª '{file_path}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        
        # –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª —Ç–∞ –ø–∞—Ä—Å–∏–º–æ –∫–æ–∂–µ–Ω —Ä—è–¥–æ–∫
        with log_file.open('r', encoding='utf-8') as file:
            for line in file:
                if line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
                    parsed_log = parse_log_line(line)
                    if parsed_log:  # –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω—ñ —Ä—è–¥–∫–∏
                        logs.append(parsed_log)
        
        return logs
        
    except FileNotFoundError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
    except IOError as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
        sys.exit(1)


def filter_logs_by_level(logs: List[Dict[str, str]], level: str) -> List[Dict[str, str]]:
    """
    –§—ñ–ª—å—Ç—Ä—É—î –ª–æ–≥–∏ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º —Ä—ñ–≤–Ω–µ–º –ª–æ–≥—É–≤–∞–Ω–Ω—è.
    
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –∑ filter —Ç–∞ lambda.
    
    Args:
        logs (list): –°–ø–∏—Å–æ–∫ –ª–æ–≥—ñ–≤
        level (str): –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó (INFO, ERROR, DEBUG, WARNING)
        
    Returns:
        list: –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ª–æ–≥—ñ–≤
    """
    # –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è filter —Ç–∞ lambda
    return list(filter(lambda log: log.get('level', '').upper() == level.upper(), logs))


def count_logs_by_level(logs: List[Dict[str, str]]) -> Dict[str, int]:
    """
    –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è.
    
    Args:
        logs (list): –°–ø–∏—Å–æ–∫ –ª–æ–≥—ñ–≤
        
    Returns:
        dict: –°–ª–æ–≤–Ω–∏–∫ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
    """
    counts = {}
    
    # –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è map –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä—ñ–≤–Ω—ñ–≤
    levels = map(lambda log: log.get('level', 'UNKNOWN'), logs)
    
    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
    for level in levels:
        counts[level] = counts.get(level, 0) + 1
    
    return counts


def display_log_counts(counts: Dict[str, int]) -> None:
    """
    –í–∏–≤–æ–¥–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ —Ç–∞–±–ª–∏—Ü—ñ.
    
    Args:
        counts (dict): –°–ª–æ–≤–Ω–∏–∫ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
    """
    print("\n–†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è | –ö—ñ–ª—å–∫—ñ—Å—Ç—å")
    print("-" * 17 + "|" + "-" * 10)
    
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Ä—ñ–≤–Ω–µ–º –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤–∏–≤–æ–¥—É
    # –ü–æ—Ä—è–¥–æ–∫: INFO, DEBUG, WARNING, ERROR, —ñ–Ω—à—ñ
    order = ['INFO', 'DEBUG', 'WARNING', 'ERROR']
    
    # –°–ø–æ—á–∞—Ç–∫—É –≤–∏–≤–æ–¥–∏–º–æ –≤—ñ–¥–æ–º—ñ —Ä—ñ–≤–Ω—ñ –≤ –∑–∞–¥–∞–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    for level in order:
        if level in counts:
            print(f"{level:<17}| {counts[level]}")
    
    # –ü–æ—Ç—ñ–º –≤–∏–≤–æ–¥–∏–º–æ —ñ–Ω—à—ñ —Ä—ñ–≤–Ω—ñ, —è–∫—â–æ –≤–æ–Ω–∏ —î
    for level, count in sorted(counts.items()):
        if level not in order:
            print(f"{level:<17}| {count}")


def display_filtered_logs(logs: List[Dict[str, str]], level: str) -> None:
    """
    –í–∏–≤–æ–¥–∏—Ç—å –¥–µ—Ç–∞–ª—ñ –ª–æ–≥—ñ–≤ –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è.
    
    Args:
        logs (list): –°–ø–∏—Å–æ–∫ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –ª–æ–≥—ñ–≤
        level (str): –†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
    """
    print(f"\n–î–µ—Ç–∞–ª—ñ –ª–æ–≥—ñ–≤ –¥–ª—è —Ä—ñ–≤–Ω—è '{level.upper()}':")
    
    if not logs:
        print(f"  –ó–∞–ø–∏—Å—ñ–≤ –∑ —Ä—ñ–≤–Ω–µ–º '{level.upper()}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return
    
    for log in logs:
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤–∏–≤—ñ–¥: –¥–∞—Ç–∞ —á–∞—Å - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        print(f"{log['date']} {log['time']} - {log['message']}")


def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Ñ–∞–π–ª—ñ–≤ –ª–æ–≥—ñ–≤.
    """
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    if len(sys.argv) < 2:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–∫–∞–∑–∞–Ω–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –ª–æ–≥—ñ–≤")
        print("\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:")
        print(f"  python {sys.argv[0]} <—à–ª—è—Ö_–¥–æ_—Ñ–∞–π–ª—É_–ª–æ–≥—ñ–≤> [—Ä—ñ–≤–µ–Ω—å_–ª–æ–≥—É–≤–∞–Ω–Ω—è]")
        print("\n–ü—Ä–∏–∫–ª–∞–¥:")
        print(f"  python {sys.argv[0]} logfile.log")
        print(f"  python {sys.argv[0]} logfile.log error")
        sys.exit(1)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
    log_file_path = sys.argv[1]
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó
    filter_level = sys.argv[2] if len(sys.argv) > 2 else None
    
    print(f"üìÇ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤ –∑ —Ñ–∞–π–ª—É: {log_file_path}")
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ª–æ–≥–∏
    logs = load_logs(log_file_path)
    
    if not logs:
        print("‚ö†Ô∏è  –§–∞–π–ª –ª–æ–≥—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≤–∞–ª—ñ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤")
        sys.exit(0)
    
    print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(logs)} –∑–∞–ø–∏—Å—ñ–≤")
    
    # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    log_counts = count_logs_by_level(logs)
    
    # –í–∏–≤–æ–¥–∏–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    display_log_counts(log_counts)
    
    # –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–æ —Ä—ñ–≤–µ–Ω—å –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó, –≤–∏–≤–æ–¥–∏–º–æ –¥–µ—Ç–∞–ª—ñ
    if filter_level:
        filtered_logs = filter_logs_by_level(logs, filter_level)
        display_filtered_logs(filtered_logs, filter_level)


if __name__ == "__main__":
    main()

